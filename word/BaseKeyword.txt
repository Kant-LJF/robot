*** Settings ***
Library           Selenium2Library
Library           DateTime
Library           Collections
Library           String
Library           RequestsLibrary
Library           XML
Library           ExcelLibrary
Library           OperatingSystem
Library           BuiltIn
Library           String
Library           Process
Library           Dialogs
Library           Screenshot
Library           Telnet
Library           SudsLibrary
Library           MyKeyword.py

*** Keywords ***
wait_element
    [Arguments]    ${locator}
    [Documentation]    等待页面中包含元素，并且元素必须显示，否则报错
    ...    参数${locator}为定位方式
    wait until page contains element    ${locator}    10    page not contains element
    wait until element is visible    ${locator}    10    element is not visible

gc_headless
    [Arguments]    ${url}
    [Documentation]    谷歌浏览器后台运行，使用headless无头模式
    ...    传入URL网址
    ${options}    MyKeyword.Create Headlesschrome Options
    Create Webdriver    Chrome    chrome_options=${options}
    Go To    ${url}
    reload page

quit_driver
    [Documentation]    运行完毕后关闭浏览器 的驱动 （ie、谷歌、火狐）
    Close All Browsers
    evaluate    os.system('taskkill /f /im IEDriverServer.exe')    os
    evaluate    os.system('taskkill /f /im chromedriver.exe')    os
    evaluate    os.system('taskkill /f /im geckodriver.exe')    os

kill_process
    [Documentation]    针对特殊情况，在运行用例前，关闭所有的 浏览器（ie，火狐，谷歌）
    evaluate    os.system('taskkill /f /im firefox.exe')    os
    evaluate    os.system('taskkill /f /im chrome.exe')    os
    evaluate    os.system('taskkill /f /im iexplore.exe')    os

open_url
    [Arguments]    ${url}    ${browser}=gc
    [Documentation]    打开浏览器，参数${url}:是网址，参数${browser}：是浏览器（ie，gc,ff）
    ...    默认浏览是谷歌浏览器
    open browser    ${url}    ${browser}
    Maximize Browser Window
    reload page

click_element
    [Arguments]    ${locator}
    [Documentation]    点击元素
    ...    参数${locator}：是定位 方式 例如：id:kw
    wait_element    ${locator}
    focus    ${locator}
    click element    ${locator}

click_list
    [Arguments]    ${locator}    ${number}
    [Documentation]    得到一个元素列表
    ...    参数${locator}：是定位方式
    ...    参数：${number}是要点击的第几个元素，在列表中的索引值
    Sleep    2
    @{x}    get webelements    ${locator}
    focus    @{x}[${number}]
    click element    @{x}[${number}]

click_button
    [Arguments]    ${locator}
    [Documentation]    点击button按钮
    ...    参数${locator}：是 定位方式
    wait_element    ${locator}
    focus    ${locator}
    click button    ${locator}

click_link
    [Arguments]    ${locator}
    [Documentation]    点击链接link
    ...    参数${locator}：是定位 方式
    wait_element    ${locator}
    focus    ${locator}
    click link    ${locator}

double_click
    [Arguments]    ${locator}
    [Documentation]    双击元素
    ...    参数${locator}：是定位 方式
    wait_element    ${locator}
    focus    ${locator}
    double click element    ${locator}

input_text
    [Arguments]    ${locator}    ${text}
    [Documentation]    输入文本
    ...    参数${locator}：是定位 方式 参数${text}：是要输入的文本
    wait_element    ${locator}
    clear element text    ${locator}
    input text    ${locator}    ${text}

input_list
    [Arguments]    ${locator}    ${index}    ${text}
    [Documentation]    得到所有元素列表，根据索引进行输入文本
    ...    参数${locator}：是定位 方式	参数${text}：是要输入的文本，${index}是在列表中的索引
    sleep    2
    @{x}    get webelements    ${locator}
    focus    @{x}[${index}]
    input text    @{x}[${index}]    ${text}
    press key    @{x}[${index}]    \\13

click_radio
    [Arguments]    ${group_name}    ${value}
    [Documentation]    \#参数${group_name}：是 标签下name的值 参数${value}：是标签下value 的值
    wait until page contains element    css=input[name='${group_name}']    10    page not contains element
    select radio button    ${group_name}    ${value}

click_checkbox
    [Arguments]    ${locator}
    [Documentation]    点击复选框
    ...    参数${locator}为定位方式
    wait_element    ${locator}
    select checkbox    ${locator}

select_list_value
    [Arguments]    ${locator}    ${value}
    [Documentation]    参数${locator}：是定位 方式
    ...    参数${value}：是标签option中value的值
    ...    点击列表下拉框
    wait_element    ${locator}
    focus    ${locator}
    select from list by value    ${locator}    ${value}

select_list_index
    [Arguments]    ${locator}    ${index}
    [Documentation]    参数${locator}：是定位 方式	参数${index}：是标签option索引值
    ...    点击列表下拉框
    wait_element    ${locator}
    focus    ${locator}
    select from list by index    ${locator}    ${index}

jq_click
    [Arguments]    ${x}
    [Documentation]    使用jQuery进行点击
    ...    #jq定位是使用css定位的	参数${x}:是定位的后半部分
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    $(${x}).click()

jq_dblclick
    [Arguments]    ${x}
    [Documentation]    使用jQuery进行双击
    ...    #jq定位是使用css定位的	参数${x}:是定位的后半部分
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    $(${x}).dblclick()

jq_input
    [Arguments]    ${x}    ${y}
    [Documentation]    使用jQuery进行输入文本    #例如：'#kw',必须使用 引号括起来    不用写'css:'或者'css='
    ...    #jq定位是使用css定位的，参数${x}:是定位的后半部分	参数${y}是要输入的文本
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    $('${x[1:-1]}').val('${y}')

js_click
    [Arguments]    ${x}
    [Documentation]    JavaScript进行点击
    ...    #js定位是使用css定位的	参数${x}:是定位的后半部分
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    document.querySelector(${x}).click()

js_click_list
    [Arguments]    ${x}    ${index}
    [Documentation]    使用JavaScript进行点击
    ...    #js定位是使用css定位的	参数${x}:是定位的后半部分	参数${index}是要点击的第几个数字
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    document.querySelectorAll(${x})[${index}].click()

js_input
    [Arguments]    ${x}    ${text}
    [Documentation]    使用JavaScript输入文本
    ...    #js定位是使用css定位的	参数${locator}:是定位方式	参数${text}：是要输入的文本
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    document.querySelector(${x}).value='${text}'

js_input_list
    [Arguments]    ${x}    ${index}    ${text}
    [Documentation]    使用JavaScript进行输入文本
    ...    #js定位是使用css定位的	参数${x}:是定位的后半部分	参数${index}是要点击的第几个数字,${text}是输入文本
    ...    #例如：'#kw',必须使用 引号括起来	不用写'css:'或者'css='
    sleep    2
    execute javascript    document.querySelectorAll(${x})[${index}].value='${text}'

div_scroll_Top
    [Arguments]    ${x}    ${number}
    [Documentation]    div内置滚动条上下移动
    ...    #js定位是使用css定位的	参数${x}:是定位的后半部分	参数${number}：是滚动的位置 ，输入的值
    ...    #例如：'#kw',必须使用引号 括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    document.querySelector(${x}).scrollTop=${number}

div_scroll_Left
    [Arguments]    ${x}    ${number}
    [Documentation]    div内置滚动条左右移动
    ...    #js定位是使用css定位的	参数${x}:是定位的后半部分	参数${number}：是滚动的位置 ，输入的值
    ...    #例如：'#kw',必须使用引号 括起来	不用写'css:'或者'css='
    wait_element    css:${x[1:-1]}
    focus    css:${x[1:-1]}
    execute javascript    document.querySelector(${x}).scrollLeft=${number}

scrollTop
    [Arguments]    ${number}
    [Documentation]    整个页面上下移动滚动条
    ...    ${number}是输入的数字
    execute javascript    document.documentElement.scrollTop=${number}

open_new_page
    [Arguments]    ${url}
    [Documentation]    \#打开新的网址，参数${url} ：是网址
    sleep    3
    execute javascript    window.open('${url}')

switch_fram
    [Arguments]    ${locator}
    [Documentation]    \#切换到frame框，	参数${locator}：是定位方式，
    ...    #如果有id和name的话直接写： 两个属性的值即可	例如id=kw，name=su，直接写 kw或su即可
    wait_element    ${locator}
    focus    ${locator}
    select frame    ${locator}

switch_window
    [Arguments]    ${x}    ${y}
    [Documentation]    \#要跳转到第三个窗口	输入三个窗口的列表和两个窗口 的列列表
    ...    #两个列表的前后没有关系
    ${z}    evaluate    [list(set(${x})-set(${y}))[0] if len(${x}) > len(${y}) else list(set(${y})-set(${x}))[0]]
    sleep    3
    select window    ${z[0]}
    maximize browser window

asset_contain
    [Arguments]    ${expect}    ${actual}
    log    ${${actual}.replace('\n',',')}    #打印实际结果
    should contain    ${expect}    ${actual}

get_text
    [Arguments]    ${locator}
    [Documentation]    \#得到页面中的文本	参数${locator}：是定位方式	最后将文本${x}返回
    wait_element    ${locator}
    focus    ${locator}
    ${x}    get text    ${locator}
    [Return]    ${x}

get_attr
    [Arguments]    ${locator}    ${name}
    [Documentation]    \#得到页面中的元素的属性	参数${locator}：是定位方式	${name}是属性名称
    wait_element    ${locator}
    focus    ${locator}
    ${atrr}    Selenium2Library.Get Element Attribute    ${locator}    ${name}
    [Return]    ${atrr}

join_str
    [Arguments]    ${str1}    ${str2}
    [Documentation]    连接字符串
    ${text}    Catenate    SEPARATOR=    ${str1}    ${str2}
    [Return]    ${text}

rf_input_time
    [Arguments]    ${locator}    ${number}
    [Documentation]    \#给input标签输入日期	参数${locator} 是：定位方式	参数${number}：是给当前时间 加或减少的天数
    ...    #增加3天：输入数字3即可	减少3天：输入-3即可
    ${t1}    get current date
    ${t2}    add time to date    ${t1}    ${number}days
    wait_element    ${locator}
    focus    ${locator}
    assign id to element    ${locator}    ${t1}
    execute javascript    window.document.getElementById('${t1}').value='${t2[0:10]}'

py_input_time
    [Arguments]    ${x}    ${y}    ${z}    ${d}
    [Documentation]    \#给input标签输入日期	参数${x}是定位方式	参数${y}是：是否判断周末 判断输入yes，不判断输入no	${d}:增减的天数
    ...    #${z},增加日期输入+ 减少日期输入-	参数${d}是要减少或增加的天数	\
    ${t1}    evaluate    int(${d})
    ${t2}    Date Weekend    ${y}    ${z}    ${t1}
    wait_element    ${x}
    ${t3}    get current date
    assign id to element    ${x}    ${t3}
    execute javascript    window.document.getElementById('${t3}').value='${t2}'

py_input_thurday
    [Arguments]    ${locator}
    [Documentation]    \#参数${locator}是输入框的定位方式，默认输入礼拜四的日期
    ${t1}    Date Thursdy
    wait_element    ${locator}
    ${t2}    get current date
    assign id to element    ${locator}    ${t2}
    execute javascript    window.document.getElementById('${t2}').value='${t1}'

get_excel_data
    [Arguments]    ${name}
    [Documentation]    \#读取excel的数据	参数${x}为：excel存放地址	参数${y}：为excel的名字
    ${x}    Set Variable    ${CURDIR}
    ${x1}    Set Variable    ${x.split('\word')[0]}
    ${excel_address}    join_str    ${x1}    \\data\\${name}.xlsx    #得到excel存放地址
    @{z}    read_excel    ${excel_address}
    Set Global Variable    ${data}    ${z}

enter
    [Arguments]    ${locator}
    [Documentation]    模仿回车键
    press key    ${locator}    \\13

mouse_over
    [Arguments]    ${locator}
    [Documentation]    鼠标悬浮到元素上
    wait_element    ${locator}
    Mouse Over    ${locator}

upload
    [Arguments]    ${locator}    ${name}
    [Documentation]    上传文件，文件放到data文件夹中，${locator}是上传框的定位，${name}是文件的名字和后缀名
    Wait Until Page Contains Element    ${locator}
    ${x}    Set Variable    ${CURDIR}
    ${x1}    Set Variable    ${x.split('\word')[0]}
    ${excel_address}    Join Path    ${x1}    \data\${name}    #得到excel存放地址
    Choose File    ${locator}    ${excel_address}
    sleep    1

new_session
    [Arguments]    ${host}
    [Documentation]    创建新会话
    create session    api    ${host}

assert_interface
    [Arguments]    ${resp}    ${actual_index}    ${expect_code}    ${expect_data}
    [Documentation]    接口用例断言
    ...    ${resp} 是实例，${actual_index}是得到实际数据的索引，
    ...    ${expect_code}参数是预期的响应码
    ...    ${expect_data}参数是预期数据
    ${x}    to json    ${resp.content}    #将返回的数据格式化成 json格式
    ${actual}    Evaluate    json.dumps(${x${actual_index}},encoding='UTF-8',ensure_ascii=False)    json
    ${expect}    Evaluate    json.dumps(${expect_data},encoding='UTF-8',ensure_ascii=False)    json
    ${result}    Evaluate    ${actual}==${expect}
    ${x}    Catenate    SEPARATOR=,    ${resp.status_code}    ${actual}    #连接实际的状态码 和数据
    ${y}    Catenate    SEPARATOR=,    ${expect_code}    ${expect_data}    #连接预期的的状态码 和数据
    log    ${x.replace('\n',',')}    #打印实际结果
    log    ${y.replace('\n','').replace(' ','')}    #打印预期结果
    Should Be Equal As Strings    ${resp.status_code}    ${expect_code}    #对比返回码的正确性
    Should Be Equal As Strings    ${result}    True    #对比数据正确性
